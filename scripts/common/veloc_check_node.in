#!/usr/bin/perl -w
use strict;
use Getopt::Long qw/ :config gnu_getopt ignore_case /;

# check health of current node
#   control directory is available and of proper size
#   cache directory is available and of proper size
# print PASS if good, and FAIL if not

my $prog = "veloc_check_node";

# define our usage
sub print_usage
{
  print "\n";
  print "  veloc_check_node -- checks that the current node is healthy\n";
  print "\n";
  print "  Usage:  veloc_check_node [--cntl <dir>] [--cache <dir>]\n";
  print "\n";
  print "  Options:\n";
  print "    --free             Check that free capacity of drive meets limit,\n";
  print "                         checks total capactiy of drive otherwise.\n";
  print "    --cntl <dir>       Specify the VELOC control directory.\n";
  print "    --cache <dir>      Specify the VELOC cache directory.\n";
  print "\n";
  exit 1;
}

# read in options specified by user
my %conf = ();
$conf{free}       = undef;
$conf{cntl_list}  = undef;
$conf{cache_list} = undef;
$conf{help}  = 0;
my $rc = GetOptions (
  "free"    => \$conf{free},
  "cntl=s"  => \$conf{cntl_list},
  "cache=s" => \$conf{cache_list},
  "help|h"  => sub { $conf{help} = 1; },
);
if ($conf{help} or not $rc) {
  print_usage();
}

# split up our list of control directories
if (defined $conf{cntl_list}) {
  my @dirs = split(",", $conf{cntl_list});
  foreach my $dir (@dirs) {
    if ($dir =~ /(.*):(\d+)/) {
      $conf{cntl}{$1}{bytes} = $2;
    } else {
      $conf{cntl}{$dir}{bytes} = undef;
    }
  }
}

# split up our list of cache directories
if (defined $conf{cache_list}) {
  my @dirs = split(",", $conf{cache_list});
  foreach my $dir (@dirs) {
    if ($dir =~ /(.*):(\d+)/) {
      $conf{cache}{$1}{bytes} = $2;
    } else {
      $conf{cache}{$dir}{bytes} = undef;
    }
  }
}

# check that we can access the directory
foreach my $type ("cntl", "cache") {
  my $dir = undef;
  if (defined $conf{$type}) {
    my @dirs = (keys %{$conf{$type}});

    # check that we can access the directory (try to run ls on it)
    foreach my $dir (@dirs) {
      `ls -lt $dir 2>/dev/null`;
      if ($? != 0) {
        print "FAIL: Could not access directory: $dir\n";
        exit 1;
      }
    }

    # if a size is defined, check that the total size is enough
    foreach my $dir (@dirs) {
      if (defined $conf{$type}{$dir}{bytes}) {
        # TODO: need to know which unit df is using
        # convert expected size from bytes to kilobytes
        my $kb = int($conf{$type}{$dir}{bytes} / 1024);

        # check total drive capacity, unless --free was given, then check free space on drive
        my $df_arg_pos = 2;
        if (defined $conf{free}) {
          $df_arg_pos = 4;
        }

        # ok, now get drive capacity
        my $df_kb = `df -aPk $dir | tail -1 | awk '{print \$$df_arg_pos}' 2>/dev/null`;
        chomp $df_kb;
        if ($? != 0) {
          print "FAIL: Could not access directory: $dir\n";
          exit 1;
        }

        # finally, check that capacity meets expected limit from config file
        if ($df_kb < $kb) {
          print "FAIL: Insufficient space in directory: $dir, expected $kb KB, found $df_kb KB\n";
          exit 1;
        }
      }
    }

    # attempt to write to directory
    foreach my $dir (@dirs) {
      # define a filename for a test file
      my $testfile = "$dir/testfile.txt";

      # attempt to touch the test file
      `touch $testfile`;
      if ($? != 0) {
        print "FAIL: Could not touch test file: $testfile\n";
        exit 1;
      }

      # attempt to remove the test file
      `rm -f $testfile`;
      if ($? != 0) {
        print "FAIL: Could not rm test file: $testfile\n";
        exit 1;
      }
    }
  }
}

print "PASS\n";
exit 0;
