#!/usr/bin/perl -w
use strict;
use lib '@CMAKE_INSTALL_FULL_DATADIR@/veloc';
use veloc_hostlist;
use Getopt::Long qw/ :config gnu_getopt ignore_case /;

my $prog = "veloc_glob_hosts";

sub print_usage
{
  print "\n";
  print "  Usage:  $prog [options]\n";
  print "\n";
  print "  Options:\n";
  print "    -c, --count                 Print the number of hosts.\n";
  print "    -n, --nth <num>             Output the Nth host (1=lo, -1=hi).\n";
  print "    -h, --hosts <hosts>         Use this hostlist.\n";
  print "    -m, --minus <s1:s2>         Elements of s1 not in s2.\n";
  print "    -i, --intersection <s1:s2>  Intersection of s1 and s2 hosts.\n";
  print "    -C, --compress <csv hosts>  Compress the csv hostlist\n";
  print "\n";
  exit 1;
}

# read in the command line options
my %conf = ();
$conf{count}        = undef;
$conf{nth}          = undef;
$conf{hosts}        = undef;
$conf{minus}        = undef;
$conf{intersection} = undef;
$conf{compress}     = undef;

my $rc = GetOptions (
  "count|c"          => \$conf{count},
  "nth|n=i"          => \$conf{nth},
  "hosts|h=s"        => \$conf{hosts},
  "minus|m=s"        => \$conf{minus},
  "intersection|i=s" => \$conf{intersection},
  "compress|C=s"     => \$conf{compress},
);
if ($conf{help} or not $rc) {
  print_usage();
}

# read the nodeset from command line
my $valid = undef;
my @hostset = ();
if (defined $conf{hosts}) {
  # user specified precise nodeset to use
  @hostset = veloc_hostlist::expand($conf{hosts});
  $valid = 1;
} elsif (defined $conf{minus}) {
  # subtract nodes in set2 from set1
  if ($conf{minus} =~ /^(.*):(.*)$/) {
    my $h1 = $1;
    my $h2 = $2;
    my @set1 = veloc_hostlist::expand($h1);
    my @set2 = veloc_hostlist::expand($h2);
    @hostset = veloc_hostlist::diff(\@set1, \@set2);
    $valid = 1;
  } else {
    print_usage();
  }
} elsif (defined $conf{intersection}) {
  # take the intersection of two nodesets
  if ($conf{intersection} =~ /^(.*):(.*)$/) {
    my $h1 = $1;
    my $h2 = $2;
    my @set1 = veloc_hostlist::expand($h1);
    my @set2 = veloc_hostlist::expand($h2);
    @hostset = veloc_hostlist::intersect(\@set1, \@set2);
    $valid = 1;
  } else {
    print_usage();
  }
} elsif (defined $conf{compress}) {
  my @fields = split(",", $conf{compress});
  print veloc_hostlist::compress(@fields);
  exit 0;
}

# if nothing set the nodeset, print usage
if (not $valid) {
  print_usage();
}

# ok, got our resulting nodeset, now print stuff to the screen
if (defined $conf{nth}) {
  # print out the nth node of the nodelist
  my $n = $conf{nth};
  if ($n == 0 or abs($n) > @hostset) {
    print "$prog: ERROR: Host index ($n) is out of range for specified host list.\n";
    exit 1;
  }
  if ($n > 0) { $n--; }
  print $hostset[$n] . "\n";
} elsif (defined $conf{count}) {
  # print the number of nodes in the nodelist
  print scalar(@hostset) . "\n";
} else {
  # just print the nodelist
  print veloc_hostlist::compress(@hostset) . "\n";
}

exit 0;
